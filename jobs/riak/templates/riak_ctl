#!/bin/bash

# Control script to start/stop ruby/rack riak job on a BOSH controlled VM
#
# In local development, this script can be run manually. Examples below assume you are in the root of this release project.
#
# Start process example:
# APP_DIR=/path/to/riak RACK_ENV=development COMMAND=shotgun PORT=9393 jobs/riak/templates/riak_ctl start
#
# View STDOUT/STDERR logs:
# jobs/riak/templates/riak_ctl logs
#
# Clear logs:
# jobs/riak/templates/riak_ctl clearlogs

# TODO - change "EXECUTABLE_SERVER" to the command to run

RUN_DIR=/var/vcap/sys/run/riak
LOG_DIR=/var/vcap/sys/log/riak
STORE=/var/vcap/store/riak
PIDFILE=$RUN_DIR/riak.pid

export PATH=/var/vcap/packages/ruby/bin:$PATH
export HOME=/var/vcap

COMMAND=${COMMAND:-/var/vcap/packages/riak/bin/riak start}
HOME=${HOME:-/home/vcap}

case $1 in

  start)
    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR
    mkdir -p $STORE

    # Put the config files in place
    cp /var/vcap/jobs/riak/config/riak.conf /var/vcap/packages/riak/etc/riak.conf
  	
    # Set the max open file limit
    ulimit -n 65536

    # Update vm.args with current IP address
    IP_ADDR=`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}' | tail -1`
    sed -i "s/127.0.0.1/$IP_ADDR/" /var/vcap/packages/riak/etc/riak.conf
  	
    # Start riak
    /var/vcap/packages/riak/bin/riak start
    ps -A | grep beam | sed -e 's/^[ \t]*//' | awk '{split($0,a,/ /); print a[1]}' > $PIDFILE
  	
    # Join the cluster if we arn't the seed node
    if [ "$IP_ADDR" != "<%= properties.riak.seed_node %>" ]
    then
  	 bash /var/vcap/jobs/riak/join_cluster.sh
    fi
    ;;

  stop)
    /var/vcap/packages/riak/bin/riak stop
    rm -f $PIDFILE
    ;;

  logs)
    cat $LOG_DIR/*
    ;;

  tail)
    tail -f $LOG_DIR/*
    ;;

  clearlogs)
    rm $LOG_DIR/*
    ;;

  *)
  echo "Usage: riak_ctl {start|stop|logs|tail|clearlogs}" ;;
esac
exit 0
